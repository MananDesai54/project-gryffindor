import { Agent } from "@gryffindor/client/common/types/agent/agent.type";
import { isUndefined, keys, reduce } from "lodash";
import { useEffect, useMemo } from "react";
import AddedVariables from "./addVariable/addedVariables";
import { extractVariables } from "./addVariable/util/addVariable.util";
import FirstMessage from "./firstMessage";
import SystemPrompt from "./systemPrompt";
import LlmSelection from "./llmSelection/llmSelection";
import AppCard from "@gryffindor/client/common/components/app/appCard/appCard";
import { Input } from "@gryffindor/client/common/components/shadcn/components/ui/input";
import KnowledgeBase from "./knowledgeBase/knowledgeBase";
import Tools from "./tools/tools";

type Props = {
  agent?: Agent;
  onChange: (agent: Partial<Agent["configuration"]>) => void;
};

export default function AgentConfigurations({ agent, onChange }: Props) {
  const addedVariables = useMemo(
    () => keys(agent?.configuration?.dynamicVariables),
    [agent?.configuration?.dynamicVariables],
  );

  useEffect(() => {
    const allVariables = [
      ...extractVariables(agent?.configuration?.firstMessage || ""),
      ...extractVariables(agent?.configuration?.systemPrompt || ""),
    ];
    allVariables?.length &&
      onChange({
        dynamicVariables: reduce(
          allVariables,
          (acc, variable) => {
            acc[variable.label] =
              agent?.configuration?.dynamicVariables?.[variable.label] || "";
            return acc;
          },
          {} as Record<string, string>,
        ),
      });
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [
    agent?.configuration?.dynamicVariables,
    agent?.configuration?.firstMessage,
    agent?.configuration?.systemPrompt,
    // onChange,
  ]);

  return (
    <div className="w-full mb-32 flex flex-col gap-4">
      <FirstMessage
        addedVariables={addedVariables}
        agent={agent}
        onChange={onChange}
      />
      <SystemPrompt
        addedVariables={addedVariables}
        agent={agent}
        onChange={onChange}
      />
      <AddedVariables
        addedVariables={addedVariables}
        agent={agent}
        onChange={onChange}
      />
      <LlmSelection onChange={onChange} agent={agent} />
      <AppCard
        title="Temperature"
        description="Temperature is a parameter that controls the creativity or randomness of the responses generated by the LLM."
        cardAction={
          <div className="p-2 rounded-sm border">
            {agent?.configuration?.temperature || 0}
          </div>
        }
        content={
          <Input
            type="range"
            min={0}
            max={1}
            step={0.01}
            value={agent?.configuration?.temperature || 0}
            onChange={(e) =>
              onChange({ temperature: parseFloat(e.target.value) })
            }
          />
        }
      />
      <AppCard
        title="Limit token usage"
        description="Configure the maximum number of tokens that the LLM can predict. A limit will be applied if the value is greater than 0."
        cardAction={
          <Input
            type="number"
            value={
              isUndefined(agent?.configuration?.maxTokens)
                ? -1
                : agent?.configuration?.maxTokens
            }
            onChange={(e) => onChange({ maxTokens: +(e.target.value || 0) })}
          />
        }
      />
      <KnowledgeBase />
      <Tools />
    </div>
  );
}
