import AppCard from '@gryffindor/client/common/components/app/appCard/appCard';
import { Input } from '@gryffindor/client/common/components/shadcn/components/ui/input';
import { Slider } from '@gryffindor/client/common/components/shadcn/components/ui/slider';
import { Agent } from '@gryffindor/client/common/types/agent/agent.type';
import { isUndefined, keys, reduce } from 'lodash';
import { useCallback, useMemo } from 'react';
import AddedVariables from './addVariable/addedVariables';
import { extractVariables } from './addVariable/util/addVariable.util';
import FirstMessage from './firstMessage';
import AddKnowledgeBase from './knowledgeBase/knowledgeBaseConfig';
import LlmSelection from './llmSelection/llmSelection';
import McpServerConfig from './mcpServer/mcpServerConfig';
import SystemPrompt from './systemPrompt';
import ToolsConfig from './tools/toolsConfig';

type Props = {
  agent: Agent;
  onChange: (agent: Partial<Agent['configuration']>) => void;
};

export default function AgentConfigurations({ agent, onChange }: Props) {
  const addedVariables = useMemo(
    () => keys(agent?.configuration?.dynamicVariables),
    [agent?.configuration?.dynamicVariables]
  );

  const getUpdatedDynamicVariables = useCallback(
    (firstMessage: string, systemPrompt: string) => {
      const allVariables = [
        ...extractVariables(firstMessage || ''),
        ...extractVariables(systemPrompt || ''),
      ];
      return reduce(
        allVariables,
        (acc, variable) => {
          acc[variable.label] =
            agent?.configuration?.dynamicVariables?.[variable.label] || '';
          return acc;
        },
        {} as Record<string, string>
      );
    },
    [agent?.configuration?.dynamicVariables]
  );

  const onChangeFirstMessage = useCallback(
    (update: Partial<Agent['configuration']>) => {
      onChange({
        ...update,
        dynamicVariables: getUpdatedDynamicVariables(
          update?.firstMessage || '',
          agent?.configuration?.systemPrompt || ''
        ),
      });
    },
    [agent?.configuration?.systemPrompt, onChange, getUpdatedDynamicVariables]
  );

  const onChangeSystemPrompt = useCallback(
    (update: Partial<Agent['configuration']>) => {
      onChange({
        ...update,
        dynamicVariables: getUpdatedDynamicVariables(
          agent.configuration?.firstMessage || '',
          update?.systemPrompt || ''
        ),
      });
    },
    [onChange, getUpdatedDynamicVariables, agent.configuration?.firstMessage]
  );

  return (
    <div className="w-full mb-32 flex flex-col gap-4">
      <FirstMessage
        addedVariables={addedVariables}
        agent={agent}
        onChange={onChangeFirstMessage}
      />
      <SystemPrompt
        addedVariables={addedVariables}
        agent={agent}
        onChange={onChangeSystemPrompt}
      />
      <AddedVariables
        addedVariables={addedVariables}
        agent={agent}
        onChange={onChange}
      />
      <LlmSelection onChange={onChange} agent={agent} />
      <AppCard
        title="Temperature"
        description="Temperature is a parameter that controls the creativity or randomness of the responses generated by the LLM."
        cardAction={
          <div className="p-2 rounded-sm border">
            {agent?.configuration?.temperature || 0}
          </div>
        }
        content={
          <Slider
            min={0}
            max={1}
            step={0.01}
            value={[agent?.configuration?.temperature || 0]}
            onValueChange={(value) => onChange({ temperature: value[0] })}
          />
        }
      />
      <AppCard
        title="Limit token usage"
        description="Configure the maximum number of tokens that the LLM can predict. A limit will be applied if the value is greater than 0."
        cardAction={
          <Input
            type="number"
            value={
              isUndefined(agent?.configuration?.maxTokens)
                ? -1
                : agent?.configuration?.maxTokens
            }
            onChange={(e) => onChange({ maxTokens: +(e.target.value || 0) })}
          />
        }
      />
      <AddKnowledgeBase onChange={onChange} agent={agent} />
      <ToolsConfig agent={agent} onChange={onChange} />
      <McpServerConfig agent={agent} onChange={onChange} />
    </div>
  );
}
